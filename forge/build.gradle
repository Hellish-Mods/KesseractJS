plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath

	forge {
		convertAccessWideners = true
		extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)

		mixinConfig "kubejs-common.mixins.json"
		mixinConfig "kubejs.mixins.json"
		//mixinConfig "kessjs.mixins.json"
	}
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
	dev
}

artifacts {
	dev(jar)
}

repositories {
	maven {
		name "ModMaven (JEI, Bookshelf, Game Stages)"
		url "https://modmaven.dev/"
		content {
			includeGroup "mezz.jei"
			includeGroup "net.darkhax.bookshelf"
			includeGroup "net.darkhax.gamestages"
		}
	}
	maven {
		url "https://nexus.resourcefulbees.com/repository/maven-releases/"
		content {
			includeGroup "com.resourcefulbees"
		}
	}
}

dependencies {
	forge("net.minecraftforge:forge:${rootProject.architectury.minecraft}-${rootProject.forge_version}")

	modApi("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
	modApi("curse.maven:rhizo-1003287:${rootProject.rhizo_version_forge}")

	modCompileOnly("mezz.jei:jei-1.16.5:${rootProject.forge_jei_version}")
	modCompileOnly("curse.maven:game-stages-268655:${rootProject.forge_gamestages_version_cmaven}")
	modCompileOnly("curse.maven:bookshelf-228525:${rootProject.forge_bookshelf_version_cmaven}")
	modCompileOnly("curse.maven:game-stages-268655:${rootProject.forge_gamestages_version_cmaven}")
	modCompileOnly("curse.maven:bookshelf-228525:${rootProject.forge_bookshelf_version_cmaven}")
    modCompileOnly("curse.maven:probejs-956446:${rootProject.probejs_version}") {
        transitive = false
    }

	modLocalRuntime("mezz.jei:jei-1.16.5:${rootProject.forge_jei_version}")
    modLocalRuntime(files("devlib/letmetest-1.0.jar"))
	modLocalRuntime("curse.maven:probejs-956446:${rootProject.probejs_version}")

	// test mods, these are included at runtime only
	// modRuntime("com.resourcefulbees:ResourcefulBees:1.16.5-0.6.4b")
	// modRuntime("curse.maven:athenaeum-1-16-437531:3188454")
	// modRuntime("curse.maven:artisan-worktables-1-16-437529:3277959")

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand(
			"version": project.version,
			"forge_version": rootProject.forge_version,
			"architectury_version": rootProject.architectury_version,
			"gamestages_version": rootProject.forge_gamestages_version,
			"jei_version": rootProject.forge_jei_version
		)
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set "dev-shadow"
}

remapJar {
    setInput(shadeDowngradedApi.archiveFile)
    dependsOn(shadowJar)
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	archiveClassifier.set "dev"
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

assemble.dependsOn(downgradeJar, shadeDowngradedApi)

unifiedPublishing {
	project {
		releaseType = project.artifact_type
		gameVersions = [
			"1.16.4",
			"1.16.5"
		]
		gameLoaders = ["forge"]
		displayName = "$project.mod_name Forge $project.version"
		// changelog = getGitChangelog()
		mainPublication remapJar

		relations {
			depends {
				curseforge = modrinth = "architectury-api"
			}
			depends {
				curseforge = "rhizo"
			}
			
			optional {
				curseforge = modrinth = "jei"
			}
			optional {
				curseforge = "probejs-legacy"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
				version = "$project.version+$project.name"
			}
		}
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}